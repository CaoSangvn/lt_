from flask import Flask, render_template, request, redirect, url_for, session, g, flash
from flask_socketio import SocketIO, emit
import sqlite3, os, base64, re, unicodedata
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timezone, timedelta
from functools import wraps
from concurrent.futures import ThreadPoolExecutor, TimeoutError

import google.generativeai as genai
from dotenv import load_dotenv
import requests

from googlesearch import search
from bs4 import BeautifulSoup

# --- T·∫¢I V√Ä C·∫§U H√åNH C√ÅC D·ªäCH V·ª§ ---
load_dotenv()
try:
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y GEMINI_API_KEY trong file .env")
        ai_model = None
    else:
        genai.configure(api_key=api_key)
        ai_model = genai.GenerativeModel('gemini-1.5-flash-latest')
        print("‚úÖ Kh·ªüi t·∫°o m√¥ h√¨nh AI th√†nh c√¥ng v·ªõi 'gemini-1.5-flash-latest'.")
except Exception as e:
    print(f"‚ùå L·ªói kh·ªüi t·∫°o m√¥ h√¨nh AI: {e}")
    ai_model = None
    
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

app = Flask(__name__)
app.secret_key = 'your_secret_key'
socketio = SocketIO(app)
IMAGE_FOLDER, FILE_FOLDER = 'static/image/uploads', 'static/files/uploads'
os.makedirs(IMAGE_FOLDER, exist_ok=True)
os.makedirs(FILE_FOLDER, exist_ok=True)
app.config.update(UPLOAD_IMAGE_FOLDER=IMAGE_FOLDER, UPLOAD_FILE_FOLDER=FILE_FOLDER, DATABASE='chat.db')
ALLOWED_IMAGE_EXTENSIONS, ALLOWED_FILE_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp'}, {'pdf', 'docx', 'doc', 'xlsx', 'xls', 'txt', 'pptx'}
def allowed_image(filename): return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_IMAGE_EXTENSIONS
def allowed_file(filename): return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_FILE_EXTENSIONS
def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect(app.config['DATABASE'])
        g.db.row_factory = sqlite3.Row
    return g.db
@app.teardown_appcontext
def close_connection(exception):
    db = g.pop('db', None)
    if db is not None: db.close()
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if session.get('role') != 'quanly':
            flash('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.')
            return redirect(url_for('chat'))
        return f(*args, **kwargs)
    return decorated_function

def process_messages_timestamps(raw_messages):
    messages = []
    local_tz = timezone(timedelta(hours=7))
    for msg in raw_messages:
        msg_dict = dict(msg)
        if msg_dict.get('timestamp'):
            try:
                utc_dt_naive = datetime.strptime(msg_dict['timestamp'], '%Y-%m-%d %H:%M:%S')
                utc_dt_aware = utc_dt_naive.replace(tzinfo=timezone.utc)
                local_dt = utc_dt_aware.astimezone(local_tz)
                msg_dict['timestamp'] = local_dt
            except (ValueError, TypeError):
                msg_dict['timestamp'] = None
        messages.append(msg_dict)
    return messages
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username, password, confirm_password = request.form['username'].strip(), request.form['password'], request.form['confirm_password']
        if not username or not password or password != confirm_password:
            flash("Th√¥ng tin ƒëƒÉng k√Ω kh√¥ng h·ª£p l·ªá.")
            return render_template('register.html')
        try:
            conn = get_db()
            if conn.execute("SELECT id FROM users WHERE username = ?", (username,)).fetchone():
                flash("T√™n ƒëƒÉng nh·∫≠p n√†y ƒë√£ t·ªìn t·∫°i.")
                return render_template('register.html')
            conn.execute("INSERT INTO users (username, password, role) VALUES (?, ?, ?)", (username, generate_password_hash(password), 'nhanvien'))
            conn.commit()
            flash("ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p.")
            return redirect(url_for('login'))
        except sqlite3.Error as e:
            flash(f"ƒê√£ c√≥ l·ªói x·∫£y ra v·ªõi c∆° s·ªü d·ªØ li·ªáu: {e}")
            return render_template('register.html')
    return render_template('register.html')
@app.route('/', methods=['GET', 'POST'])
def login():
    session.clear()
    if request.method == 'POST':
        username, password = request.form['username'].strip(), request.form['password']
        user = get_db().execute("SELECT * FROM users WHERE username=?", (username,)).fetchone()
        if user and check_password_hash(user['password'], password):
            session.update(username=username, role=user['role'], user_id=user['id'])    
            return redirect(url_for('admin') if user['role'] == 'quanly' else url_for('chat'))
        else:
            flash("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.")
    return render_template('login.html')
@app.route('/admin')
@admin_required
def admin(): return render_template('admin.html', users=get_db().execute('SELECT id, username, role FROM users ORDER BY id').fetchall())
@app.route('/admin/history')
@admin_required
def chat_history():
    return render_template('chat_history.html', messages=process_messages_timestamps(get_db().execute('SELECT * FROM chat ORDER BY timestamp DESC').fetchall()))
@app.route('/admin/clear_history', methods=['POST'])
@admin_required
def clear_chat_history():
    try:
        db = get_db()
        db.execute('DELETE FROM chat')
        db.commit()
        flash('To√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!', 'success')
    except sqlite3.Error as e:
        flash(f'ƒê√£ c√≥ l·ªói x·∫£y ra khi x√≥a l·ªãch s·ª≠: {e}', 'error')
    return redirect(url_for('chat_history'))
@app.route('/admin/announce', methods=['POST'])
@admin_required
def send_announcement():
    content = request.form.get('content')
    admin_username = session.get('username')
    if not content or not content.strip():
        flash('N·ªôi dung th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.', 'error')
        return redirect(url_for('admin'))
    db = get_db()
    db.execute('INSERT INTO announcements (content, admin_username) VALUES (?, ?)', (content, admin_username))
    db.commit()
    socketio.emit('new_announcement', {'content': content, 'admin': admin_username})
    flash('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!', 'success')
    return redirect(url_for('admin'))
@app.route('/chat')
def chat():
    if 'username' not in session: return redirect(url_for('login'))
    db = get_db()
    latest_announcement = db.execute('SELECT * FROM announcements ORDER BY created_at DESC LIMIT 1').fetchone()
    return render_template('chat.html', username=session['username'], messages=process_messages_timestamps(db.execute('SELECT * FROM chat ORDER BY timestamp ASC').fetchall()), announcement=latest_announcement)
@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

# =======================================================================================
# === C√ÅC H√ÄM TR·ª¢ GI√öP V√Ä C√îNG C·ª§ CHO BOT ===
# =======================================================================================
def remove_diacritics(text):
    """Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n c√≥ d·∫•u th√†nh kh√¥ng d·∫•u."""
    nfkd_form = unicodedata.normalize('NFKD', text)
    return "".join([c for c in nfkd_form if not unicodedata.combining(c)])

def extract_city_from_prompt(prompt):
    # C·∫£i ti·∫øn h√†m n√†y ƒë·ªÉ ∆∞u ti√™n c√°c danh t·ª´ ri√™ng ƒë∆∞·ª£c vi·∫øt hoa
    words = prompt.split()
    # Lo·∫°i b·ªè c√°c t·ª´ ph·ªï th√¥ng trong c√¢u h·ªèi th·ªùi ti·∫øt
    common_words = {'th·ªùi', 'ti·∫øt', 'nhi·ªát', 'ƒë·ªô', 't·∫°i', '·ªü', 'b√¢y', 'gi·ªù', 'l√†', 'bao', 'nhi√™u', 'h√¥m', 'nay'}
    # T√¨m c√°c t·ª´ vi·∫øt hoa kh√¥ng n·∫±m trong danh s√°ch t·ª´ ph·ªï th√¥ng
    potential_cities = [word for word in words if word.istitle() and word.lower() not in common_words]
    if potential_cities:
        return " ".join(potential_cities)
    return None

def get_current_weather(city="Hanoi"):
    if not WEATHER_API_KEY: return "L·ªói: Ch∆∞a c·∫•u h√¨nh API key cho d·ªãch v·ª• th·ªùi ti·∫øt."
    
    # S·ª¨A L·ªñI: Chuy·ªÉn t√™n th√†nh ph·ªë v·ªÅ kh√¥ng d·∫•u ƒë·ªÉ API d·ªÖ nh·∫≠n di·ªán
    city_no_diacritics = remove_diacritics(city)
    
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city_no_diacritics}&appid={WEATHER_API_KEY}&units=metric&lang=vi"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        description, temp, city_name = data['weather'][0]['description'], data['main']['temp'], data['name']
        # Tr·∫£ v·ªÅ t√™n g·ªëc c·ªßa th√†nh ph·ªë cho th√¢n thi·ªán
        return f"Th·ªùi ti·∫øt t·∫°i {city} hi·ªán t·∫°i: {temp}¬∞C, {description}."
    except requests.exceptions.Timeout:
        return "Xin l·ªói, y√™u c·∫ßu xem th·ªùi ti·∫øt ƒë√£ m·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ x·ª≠ l√Ω."
    except Exception:
        # Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi th√¢n thi·ªán h∆°n
        return f"Ch√†o b·∫°n! D∆∞·ªùng nh∆∞ m√¨nh ch∆∞a t√¨m ƒë∆∞·ª£c th√¥ng tin v·ªÅ nhi·ªát ƒë·ªô ·ªü {city} hi·ªán t·∫°i. C√≥ l·∫Ω h·ªá th·ªëng ƒëang g·∫∑p v·∫•n ƒë·ªÅ ho·∫∑c b·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i v·ªõi t√™n th√†nh ph·ªë kh√°c nh√©!"


def search_the_web(query):
    try:
        print(f"üîé B·∫Øt ƒë·∫ßu t√¨m ki·∫øm tr√™n web cho: '{query}'")
        urls = list(search(query, num_results=3, lang='vi'))
        if not urls:
            return "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o tr√™n m·∫°ng."

        content_snippets = []
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        
        for url in urls:
            try:
                response = requests.get(url, headers=headers, timeout=10)
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                
                paragraphs = [p.get_text() for p in soup.find_all('p')]
                text = ' '.join(paragraphs[:5])
                content_snippets.append(text[:500])
            except requests.exceptions.Timeout:
                print(f"L·ªói timeout khi ƒë·ªçc URL {url}")
                continue
            except Exception as e:
                print(f"L·ªói khi ƒë·ªçc URL {url}: {e}")
                continue
        
        if not content_snippets:
            return "Kh√¥ng th·ªÉ ƒë·ªçc n·ªôi dung t·ª´ c√°c k·∫øt qu·∫£ t√¨m th·∫•y."
        
        print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t n·ªôi dung t·ª´ {len(content_snippets)} link.")
        return "\n\n--- Tr√≠ch d·∫´n ---\n\n".join(content_snippets)

    except Exception as e:
        print(f"L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh t√¨m ki·∫øm: {e}")
        return "ƒê√£ c√≥ l·ªói x·∫£y ra khi c·ªë g·∫Øng t√¨m ki·∫øm th√¥ng tin."

def get_ai_response(prompt):
    if not ai_model: return "L·ªói: M√¥ h√¨nh AI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o."
    try:
        with ThreadPoolExecutor(max_workers=1) as executor:
            safety_settings = [
                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_NONE"},
                {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
            ]
            future = executor.submit(ai_model.generate_content, prompt, safety_settings=safety_settings)
            response = future.result(timeout=20) # TƒÉng timeout cho AI l√™n 20 gi√¢y
        
        return response.text.replace('*', '').strip()
    except TimeoutError:
        print("L·ªói: L·ªánh g·ªçi API c·ªßa AI ƒë√£ qu√° th·ªùi gian ch·ªù.")
        return "Xin l·ªói, y√™u c·∫ßu c·ªßa t√¥i ƒë·∫øn AI ƒë√£ m·∫•t qu√° nhi·ªÅu th·ªùi gian ƒë·ªÉ x·ª≠ l√Ω."
    except Exception as e:
        print(f"L·ªói khi g·ªçi API c·ªßa AI: {e}")
        return "Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n."

def _save_file(file_data, upload_folder, allowed_extensions_func):
    if not file_data: return None, None
    original_filename = file_data['filename']
    if not allowed_extensions_func(original_filename): return None, None
    new_filename = f"{datetime.now().strftime('%Y%m%d%H%M%S')}_{secure_filename(original_filename)}"
    filepath = os.path.join(upload_folder, new_filename)
    try:
        with open(filepath, 'wb') as f: f.write(base64.b64decode(file_data['data'].split(',')[1]))
        return f"/static/{upload_folder.split('static/')[1]}/{new_filename}", original_filename
    except Exception as e: return None, None

def _create_and_emit_message(username, message, image_url=None, file_url=None, original_filename=None):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('INSERT INTO chat (username, message, image_path, file_path) VALUES (?, ?, ?, ?)',
                   (username, message, image_url, file_url))
    new_message_id = cursor.lastrowid
    db.commit()
    new_message = db.execute('SELECT * FROM chat WHERE id = ?', (new_message_id,)).fetchone()
    if new_message and new_message['timestamp']:
        local_tz = timezone(timedelta(hours=7))
        utc_dt_naive = datetime.strptime(new_message['timestamp'], '%Y-%m-%d %H:%M:%S')
        utc_dt_aware = utc_dt_naive.replace(tzinfo=timezone.utc)
        local_dt = utc_dt_aware.astimezone(local_tz)
        timestamp_str = local_dt.strftime('%H:%M, %d/%m/%Y')
        socketio.emit('receive_message', {
            'user': new_message['username'],
            'message': new_message['message'],
            'image': new_message['image_path'],
            'file_info': {'url': new_message['file_path'], 'name': original_filename} if new_message['file_path'] else None,
            'timestamp': timestamp_str
        })

@socketio.on('send_message')
def handle_send_message(data):
    username = session.get('username', '·∫®n danh')
    message = data.get('message', '').strip()
    image_url, _ = _save_file(data.get('image'), app.config['UPLOAD_IMAGE_FOLDER'], allowed_image)
    file_url, original_filename = _save_file(data.get('file'), app.config['UPLOAD_FILE_FOLDER'], allowed_file)

    if message or image_url or file_url:
        _create_and_emit_message(username, message, image_url, file_url, original_filename)

    if message.lower().startswith('@bot'):
        prompt = message[4:].strip()
        if not prompt:
            _create_and_emit_message('Bot', "B·∫°n mu·ªën h·ªèi t√¥i ƒëi·ªÅu g√¨?")
            return

        socketio.emit('receive_message', {'user': 'Bot', 'message': 'ƒêang ph√¢n t√≠ch y√™u c·∫ßu...', 'timestamp': datetime.now(timezone(timedelta(hours=7))).strftime('%H:%M, %d/%m/%Y')})
        
        history = session.get('bot_history', [])
        
        intent_analysis_prompt = f"""
        Ph√¢n t√≠ch c√¢u h·ªèi cu·ªëi c√πng c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ ch·ªçn m·ªôt c√¥ng c·ª•: SEARCH, WEATHER, ho·∫∑c CONVERSE.
        - D√πng SEARCH cho c√°c c√¢u h·ªèi v·ªÅ s·ª± th·∫≠t, con ng∆∞·ªùi, ƒë·ªãa ƒëi·ªÉm, ƒë·ªãnh nghƒ©a, ho·∫∑c c√°c s·ª± ki·ªán c·∫ßn th√¥ng tin c·∫≠p nh·∫≠t.
        - D√πng WEATHER cho c√°c c√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt.
        - D√πng CONVERSE cho c√°c cu·ªôc tr√≤ chuy·ªán, ch√†o h·ªèi, √Ω ki·∫øn, ho·∫∑c c√°c c√¢u h·ªèi kh√¥ng y√™u c·∫ßu d·ªØ li·ªáu th·ª±c t·∫ø.
        L·ªãch s·ª≠ tr√≤ chuy·ªán:
        {[turn['role'] + ': ' + turn['content'] for turn in history]}
        C√¢u h·ªèi cu·ªëi c√πng c·ªßa ng∆∞·ªùi d√πng: "{prompt}"
        C√¥ng c·ª• n√†o l√† ph√π h·ª£p nh·∫•t? Ch·ªâ tr·∫£ l·ªùi b·∫±ng m·ªôt t·ª´: SEARCH, WEATHER, ho·∫∑c CONVERSE.
        """
        intent = get_ai_response(intent_analysis_prompt).strip().upper()

        bot_response_text = ""
        contextual_prompt = "\n".join([f"{turn['role']}: {turn['content']}" for turn in history]) + f"\nUser: {prompt}"

        if "WEATHER" in intent:
            city = extract_city_from_prompt(prompt) or "Hanoi"
            weather_data = get_current_weather(city)
            bot_response_text = weather_data
        
        # S·ª¨A L·ªñI: Logic x·ª≠ l√Ω ng·ªØ c·∫£nh cho t√¨m ki·∫øm
        elif "SEARCH" in intent:
            # B∆∞·ªõc 1: T·∫°o c√¢u truy v·∫•n t√¨m ki·∫øm ƒë·∫ßy ƒë·ªß ng·ªØ c·∫£nh
            query_generation_prompt = f"""D·ª±a tr√™n l·ªãch s·ª≠ tr√≤ chuy·ªán v√† c√¢u h·ªèi cu·ªëi c√πng c·ªßa ng∆∞·ªùi d√πng, h√£y t·∫°o ra m·ªôt c·ª•m t·ª´ t√¨m ki·∫øm Google ng·∫Øn g·ªçn v√† ƒë·∫ßy ƒë·ªß th√¥ng tin. Ch·ªâ tr·∫£ v·ªÅ c·ª•m t·ª´ t√¨m ki·∫øm.
            L·ªãch s·ª≠: {[turn['role'] + ': ' + turn['content'] for turn in history]}
            C√¢u h·ªèi cu·ªëi c√πng: "{prompt}"
            C·ª•m t·ª´ t√¨m ki·∫øm n√™n l√†:"""
            search_query = get_ai_response(query_generation_prompt)

            socketio.emit('receive_message', {'user': 'Bot', 'message': f"ƒêang t√¨m ki·∫øm tr√™n m·∫°ng v·ªõi t·ª´ kh√≥a: '{search_query}'...", 'timestamp': datetime.now(timezone(timedelta(hours=7))).strftime('%H:%M, %d/%m/%Y')})
            
            # B∆∞·ªõc 2: T√¨m ki·∫øm v·ªõi c√¢u truy v·∫•n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
            search_results = search_the_web(search_query)

            # B∆∞·ªõc 3: T·ªïng h·ª£p k·∫øt qu·∫£
            final_prompt = f"""D·ª±a v√†o th√¥ng tin t√¨m ki·∫øm ƒë∆∞·ª£c d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi g·ªëc c·ªßa ng∆∞·ªùi d√πng.
            Th√¥ng tin t√¨m ki·∫øm:
            {search_results}
            C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: "{prompt}"
            """
            bot_response_text = get_ai_response(final_prompt)
        
        else: # CONVERSE
            bot_response_text = get_ai_response(contextual_prompt)
        
        history.append({'role': 'User', 'content': prompt})
        history.append({'role': 'Bot', 'content': bot_response_text})
        MAX_HISTORY_TURNS = 5
        if len(history) > MAX_HISTORY_TURNS * 2: history = history[-(MAX_HISTORY_TURNS * 2):]
        session['bot_history'] = history

        _create_and_emit_message('Bot', bot_response_text)

@app.route('/admin/delete_user/<int:user_id>', methods=['POST'])
@admin_required
def delete_user(user_id):
    # NgƒÉn admin t·ª± x√≥a ch√≠nh m√¨nh
    if user_id == session.get('user_id'):
        flash('B·∫°n kh√¥ng th·ªÉ x√≥a ch√≠nh t√†i kho·∫£n c·ªßa m√¨nh.', 'error')
        return redirect(url_for('admin'))
    
    try:
        db = get_db()
        # L·∫•y username ƒë·ªÉ th√¥ng b√°o tr∆∞·ªõc khi x√≥a
        user_to_delete = db.execute('SELECT username FROM users WHERE id = ?', (user_id,)).fetchone()
        if user_to_delete:
            # X√≥a ng∆∞·ªùi d√πng kh·ªèi b·∫£ng users
            db.execute('DELETE FROM users WHERE id = ?', (user_id,))
            # (T√πy ch·ªçn) X√≥a t·∫•t c·∫£ tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng ƒë√≥
            db.execute('DELETE FROM chat WHERE username = ?', (user_to_delete['username'],))
            db.commit()
            flash(f"ƒê√£ x√≥a th√†nh c√¥ng ng∆∞·ªùi d√πng '{user_to_delete['username']}'.", 'success')
        else:
            flash('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a.', 'error')
    except sqlite3.Error as e:
        flash(f'L·ªói c∆° s·ªü d·ªØ li·ªáu khi x√≥a ng∆∞·ªùi d√πng: {e}', 'error')
    
    return redirect(url_for('admin'))

if __name__ == '__main__':
    socketio.run(app, debug=True, host='0.0.0.0')